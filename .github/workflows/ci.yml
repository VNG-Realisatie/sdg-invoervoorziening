name: Continuous Integration (CI)

on:
  push:
    branches:
      - master
    tags:
      - '*'
  pull_request:
  workflow_dispatch:

env:
  IMAGE_NAME: maykinmedia/sdg-invoervoorziening
  DJANGO_SETTINGS_MODULE: sdg.conf.ci

jobs:
  tests:
    name: Run Django tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres
        env:
          POSTGRES_HOST_AUTH_METHOD: trust
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: '3.8'

      - name: Install system packages
        run: |
          sudo apt-get update \
          && sudo apt-get install -y --no-install-recommends \
            libgdal-dev \
            gdal-bin

      - name: Install dependencies
        run: pip install -r requirements/ci.txt codecov

      - name: Run npm build
        run: |
          npm ci
          npm run build

      - name: Run tests
        run: |
          python src/manage.py collectstatic --noinput --link
          coverage run src/manage.py test src
        env:
          DJANGO_SETTINGS_MODULE: sdg.conf.ci
          DB_USER: postgres
          DB_PASSWORD: ''

      - name: Publish coverage report
        uses: codecov/codecov-action@v1

  docker_build:
    name: Build Docker image
    # Temporary until we use docker_push job
    needs:
      - tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set tag
        id: vars
        run: |
          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Strip "v" prefix from tag name (if present at all)
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

          # Use Docker `latest` tag convention
          [ "$VERSION" == "master" ] && VERSION=latest

          echo ::set-output name=tag::${VERSION}
          echo ::set-output name=git_hash::${GITHUB_SHA}

      - name: Build the Docker image
        run: |
          docker build . \
            --tag $IMAGE_NAME:$RELEASE_VERSION \
            --build-arg COMMIT_HASH=${{ steps.vars.outputs.git_hash }} \
            --build-arg RELEASE=${RELEASE_VERSION}
        env:
          RELEASE_VERSION: ${{ steps.vars.outputs.tag }}

      # - run: docker image save -o image.tar $IMAGE_NAME:${{ steps.vars.outputs.tag }}
      # - name: Store image artifact
      #   uses: actions/upload-artifact@v2
      #   with:
      #     name: docker-image
      #     path: image.tar
      #     retention-days: 1

      - name: Log into registry
        if: github.event_name == 'push'  # Exclude PRs
        run: echo "${{ secrets.DOCKER_TOKEN }}" | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin

      - name: Push the Docker image and run downstream deployment
        if: github.event_name == 'push'  # Exclude PRs
        env:
          RELEASE_VERSION: ${{ steps.vars.outputs.tag }}
        run: |
          docker push $IMAGE_NAME:$RELEASE_VERSION
          curl -XPOST -u "${{ secrets.SDG_ACCESS_TOKEN }}" -H "Accept:application/vnd.github" -H "Content-Type:application/json" https://api.github.com/repos/maykinmedia/sdg-invoervoorziening-deployment/actions/workflows/deploy-aks.yml/dispatches --data '{"ref": "main", "inputs":{"version":"$RELEASE_VERSION"}}'

  # oas-lint:
  #   needs: tests
  #   name:  Validate OAS
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Download generated OAS
  #       uses: actions/download-artifact@v2
  #       with:
  #         name: open-forms-oas
  #     - name: Use Node.js
  #       uses: actions/setup-node@v1
  #       with:
  #         node-version: '12'
  #     - name: Install spectral
  #       run: npm install -g @stoplight/spectral
  #     - name: Run OAS linter
  #       run: spectral lint ./openapi.yaml

  # oas-postman:
  #   needs: tests
  #   name: Generate Postman collection from OAS
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Download generated OAS
  #       uses: actions/download-artifact@v2
  #       with:
  #         name: open-forms-oas
  #     - name: Use Node.js
  #       uses: actions/setup-node@v1
  #       with:
  #         node-version: '12'
  #     - name: Install dependencies
  #       run: npm install -g openapi-to-postmanv2
  #     - name: Create tests folder
  #       run: mkdir -p ./tests/postman
  #     - name: Generate Postman collection
  #       run: openapi2postmanv2 -s ./openapi.yaml -o ./tests/postman/collection.json --pretty

  # oas-generate-sdks:
  #   needs: tests
  #   name: Generate SDKs from OAS
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Download generated OAS
  #       uses: actions/download-artifact@v2
  #       with:
  #         name: open-forms-oas
  #     - name: Use Node.js
  #       uses: actions/setup-node@v1
  #       with:
  #         node-version: '12'
  #     - name: Install dependencies
  #       run: npm install -g @openapitools/openapi-generator-cli
  #     - name: Validate schema
  #       run: openapi-generator-cli validate -i ./openapi.yaml
  #     - name: Generate Java client
  #       run: openapi-generator-cli generate -i ./openapi.yaml --global-property=modelTests=false,apiTests=false,modelDocs=false,apiDocs=false \
  #         -o ./sdks/java -g java --additional-properties=dateLibrary=java8,java8=true,optionalProjectFile=false,optionalAssemblyInfo=false
  #     - name: Generate .NET Core client
  #       run: openapi-generator-cli generate -i ./openapi.yaml --global-property=modelTests=false,apiTests=false,modelDocs=false,apiDocs=false \
  #         -o ./sdks/netcore -g csharp-netcore --additional-properties=optionalProjectFile=false,optionalAssemblyInfo=false
  #     - name: Generate .NET Full Framework client
  #       run: openapi-generator-cli generate -i ./openapi.yaml --global-property=modelTests=false,apiTests=false,modelDocs=false,apiDocs=false \
  #         -o ./sdks/net -g csharp --additional-properties=optionalProjectFile=false,optionalAssemblyInfo=false
  #     - name: Generate Python client
  #       run: openapi-generator-cli generate -i ./openapi.yaml --global-property=modelTests=false,apiTests=false,modelDocs=false,apiDocs=false \
  #         -o ./sdks/python -g python --additional-properties=optionalProjectFile=false,optionalAssemblyInfo=false+

  # docker_push:
  #   needs:
  #     - tests
  #     - docker_build
  #     # - oas-lint
  #     # - oas-postman
  #     # - oas-generate-sdks

  #   name: Push Docker image
  #   runs-on: ubuntu-latest
  #   if: github.event_name == 'push'  # Exclude PRs

  #   steps:
  #     - uses: actions/checkout@v2

  #     - name: Download built image
  #       uses: actions/download-artifact@v2
  #       with:
  #         name: docker-image

  #     - name: Set tag
  #       id: vars
  #       run: |
  #         # Strip git ref prefix from version
  #         VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

  #         # Strip "v" prefix from tag name (if present at all)
  #         [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

  #         # Use Docker `latest` tag convention
  #         [ "$VERSION" == "master" ] && VERSION=latest

  #         echo ::set-output name=tag::${VERSION}

  #     - name: Load image
  #       run: |
  #         docker image load -i image.tar

  #     - name: Log into registry
  #       run: echo "${{ secrets.DOCKER_TOKEN }}" | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin

  #     - name: Push the Docker image
  #       env:
  #         RELEASE_VERSION: ${{ steps.vars.outputs.tag }}
  #       run: docker push $IMAGE_NAME:$RELEASE_VERSION
